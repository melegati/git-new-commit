#!/usr/bin/python
import os
from subprocess import call
from subprocess import Popen, PIPE

summary_max_chars = 50

config = {}
execfile("new-commit.conf", config)

class GitMessageWriter:
	
	def write(self, message):
		call(["git commit", "-m", message])

class StdoutMessageWriter:

	def write(self, message):
		print("git commit -m \"" + message + "\"")

class MessageBuildElementChain:

	def __init__(self):
		self.successor = None

	def ask_user(self, question, options = None, descripts = None):
		if options is None: 
			return raw_input(question + "\n")
		else:
			selected_index = 0
			while(selected_index <= 0 or selected_index >= len(options)):
				i = 0
				for option in options:
					i = i + 1
					print(str(i) + " - " + option + ' (' + descripts[i-1] + ')')
				selected_index = int(raw_input())
			return options[selected_index - 1]

	def call_successor(self, built_message):
		if not (self.successor is None):
			self.successor.handle(built_message)

	def chain(self, successor):
		self.successor = successor
		return successor

class FilesMessageBuildElementChain(MessageBuildElementChain):

	def handle(self, built_message):
		proc = Popen('git status -s', stdout=PIPE)
		out, err = proc.communicate()
		if len(out) != 0:
			outList = out.split('\n')
			if '' in outList: outList.remove('')
			if ' ' in outList: outList.remove(' ')
			built_message += " (" + ", ".join(outList) + ")"
		MessageBuildElementChain.call_successor(self, built_message)


class LabelMessageBuildElementChain(MessageBuildElementChain):

	def __init__(self):
		self.labels = config["labels"]
		self.descripts = config["descripts"]

	def handle(self, built_message):
		label = MessageBuildElementChain.ask_user(self, "Label:", self.labels, self.descripts)
		built_message += label
		if label == 'BUGFIX':
			bugId = MessageBuildElementChain.ask_user(self, "CASE ID:")
			if len(bugId) > 0:
				built_message += ' ' + '#' + bugId
		MessageBuildElementChain.call_successor(self, built_message)

class SummaryMessageBuildElementChain(MessageBuildElementChain):

	def handle(self, built_message):
		available_chars = summary_max_chars - len(built_message) - 1
		summary = MessageBuildElementChain.ask_user(self, "Summary (" + str(available_chars) + " characters left):")
		if len(summary) > 0:
			built_message += " " + summary
		MessageBuildElementChain.call_successor(self, built_message)

class RemarksMessageBuildElementChain(MessageBuildElementChain):

	def handle(self, built_message):
		available_chars = summary_max_chars - len(built_message) - 1
		remarks = MessageBuildElementChain.ask_user(self, "Remarks (" + str(available_chars) + " characters left):")
		if len(remarks) > 0:
			built_message += " - " + remarks
		MessageBuildElementChain.call_successor(self, built_message)

class SubProjectMessageBuildElementChain(MessageBuildElementChain):

	def handle(self, built_message):
		folderList = os.path.dirname(os.path.abspath(__file__))
		folderList = folderList.split('\\')
		subproject = ""
		for i in folderList:
			if(subproject == True):
				subproject = i
				break;
			if(config['Project'] == i):
				subproject = True
		if len(subproject) > 0:
			built_message += " [" + subproject + "]"
		MessageBuildElementChain.call_successor(self, built_message)

class WriterMessageBuildElementChain(MessageBuildElementChain):

	def __init__(self, writer):
		self.writer = writer

	def handle(self, built_message):
		self.writer.write(built_message)

def get_class( kls ):
    parts = kls.split('.')
    module = ".".join(parts[:-1])
    m = __import__( module )
    for comp in parts[1:]:
        m = getattr(m, comp)            
    return m

def build_chain(elements):
	chain = chain_root = None
	for element in elements:
		D = get_class(__name__ + "." + element + "MessageBuildElementChain")
		chain_element = D()
		if chain_root is None:
			chain_root = chain_element
		chain = chain_element if chain is None else chain.chain(chain_element)
	writer = StdoutMessageWriter()
	chain.chain(WriterMessageBuildElementChain(writer))
	return chain_root


chain_root = build_chain(config["elements"])

chain_root.handle("")